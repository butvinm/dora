title: Given directory, all files should be analyzed recursively
args: ['dora', PosixPath('tests/codebase')]
exitcode: 0
stdout:
tests/codebase/subfolder/test2.py:2:11
           builtins.str (OpExpr)
           v
    return [32mstr(a) + str(b)[0m


tests/codebase/subfolder/test2.py:2:11
           builtins.str (CallExpr)
           v
    return [32mstr(a)[0m + str(b)


tests/codebase/subfolder/test2.py:2:11
           Overload(def (object: builtins.object =) -> builtins.str, def (object: _collections_abc.Buffer, encoding: builtins.str =, errors: builtins.str =) -> builtins.str) (NameExpr)
           v
    return [32mstr[0m(a) + str(b)


tests/codebase/subfolder/test2.py:2:15
               builtins.int (NameExpr)
               v
    return str([32ma[0m) + str(b)


tests/codebase/subfolder/test2.py:2:20
                    builtins.str (CallExpr)
                    v
    return str(a) + [32mstr(b)[0m


tests/codebase/subfolder/test2.py:2:20
                    Overload(def (object: builtins.object =) -> builtins.str, def (object: _collections_abc.Buffer, encoding: builtins.str =, errors: builtins.str =) -> builtins.str) (NameExpr)
                    v
    return str(a) + [32mstr[0m(b)


tests/codebase/subfolder/test2.py:2:24
                        builtins.int (NameExpr)
                        v
    return str(a) + str([32mb[0m)


tests/codebase/subfolder/test2.py:5:4
    Literal[10]? (IntExpr)
    v
a = [32m10[0m


tests/codebase/subfolder/test2.py:5:0
builtins.int (NameExpr)
v
[32ma[0m = 10


tests/codebase/subfolder/test2.py:6:4
    Literal[11]? (IntExpr)
    v
b = [32m11[0m


tests/codebase/subfolder/test2.py:6:0
builtins.int (NameExpr)
v
[32mb[0m = 11


tests/codebase/subfolder/test2.py:7:0
None (CallExpr)
v
[32mprint(a + b)[0m


tests/codebase/subfolder/test2.py:7:0
Overload(def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[_typeshed.SupportsWrite[builtins.str], None] =, flush: Literal[False] =), def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[builtins._SupportsWriteAndFlush[builtins.str], None] =, flush: builtins.bool)) (NameExpr)
v
[32mprint[0m(a + b)


tests/codebase/subfolder/test2.py:7:6
      builtins.int (OpExpr)
      v
print([32ma + b[0m)


tests/codebase/subfolder/test2.py:7:6
      builtins.int (NameExpr)
      v
print([32ma[0m + b)


tests/codebase/subfolder/test2.py:7:10
          builtins.int (NameExpr)
          v
print(a + [32mb[0m)


tests/codebase/subfolder/test2.py:9:0
None (CallExpr)
v
[32mprint(foo(a, b))[0m


tests/codebase/subfolder/test2.py:9:0
Overload(def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[_typeshed.SupportsWrite[builtins.str], None] =, flush: Literal[False] =), def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[builtins._SupportsWriteAndFlush[builtins.str], None] =, flush: builtins.bool)) (NameExpr)
v
[32mprint[0m(foo(a, b))


tests/codebase/subfolder/test2.py:9:6
      builtins.str (CallExpr)
      v
print([32mfoo(a, b)[0m)


tests/codebase/subfolder/test2.py:9:6
      def (a: builtins.int, b: builtins.int) -> builtins.str (NameExpr)
      v
print([32mfoo[0m(a, b))


tests/codebase/subfolder/test2.py:9:10
          builtins.int (NameExpr)
          v
print(foo([32ma[0m, b))


tests/codebase/subfolder/test2.py:9:13
             builtins.int (NameExpr)
             v
print(foo(a, [32mb[0m))


tests/codebase/main.py:13:11
           None (NameExpr)
           v
    return [32mNone[0m


tests/codebase/main.py:18:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m


tests/codebase/main.py:18:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b


tests/codebase/main.py:18:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m


tests/codebase/main.py:23:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m


tests/codebase/main.py:23:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b


tests/codebase/main.py:23:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m


tests/codebase/main.py:28:11
           builtins.int (OpExpr)
           v
    return [32ma + b + c[0m


tests/codebase/main.py:28:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m + c


tests/codebase/main.py:28:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b + c


tests/codebase/main.py:28:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m + c


tests/codebase/main.py:28:19
                   builtins.int (NameExpr)
                   v
    return a + b + [32mc[0m


tests/codebase/main.py:35:13
             Literal[1]? (IntExpr)
             v
    c: int = [32m1[0m,


tests/codebase/main.py:37:11
           builtins.int (OpExpr)
           v
    return [32ma + b + c[0m


tests/codebase/main.py:37:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m + c


tests/codebase/main.py:37:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b + c


tests/codebase/main.py:37:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m + c


tests/codebase/main.py:37:19
                   builtins.int (NameExpr)
                   v
    return a + b + [32mc[0m


tests/codebase/main.py:42:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m


tests/codebase/main.py:42:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b


tests/codebase/main.py:42:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m


tests/codebase/main.py:47:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m


tests/codebase/main.py:47:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b


tests/codebase/main.py:47:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m


tests/codebase/main.py:52:11
           builtins.int (OpExpr)
           v
    return [32ma + b[0m


tests/codebase/main.py:52:11
           builtins.int (NameExpr)
           v
    return [32ma[0m + b


tests/codebase/main.py:52:15
               builtins.int (NameExpr)
               v
    return a + [32mb[0m


tests/codebase/main.py:55:4
    Any (CallExpr)
    v
T = [32mTypeVar('T')[0m


tests/codebase/main.py:55:-1
Any (TypeVarExpr)
v
T = TypeVar('T')[32m[0mT = TypeVar('T')


tests/codebase/main.py:55:0
Any (NameExpr)
v
[32mT[0m = TypeVar('T')


tests/codebase/main.py:61:11
           T`-1 (NameExpr)
           v
    return [32ma[0m


tests/codebase/main.py:64:4
    Any (CallExpr)
    v
K = [32mTypeVar('K')[0m


tests/codebase/main.py:64:-1
Any (TypeVarExpr)
v
K = TypeVar('K')[32m[0mK = TypeVar('K')


tests/codebase/main.py:64:0
Any (NameExpr)
v
[32mK[0m = TypeVar('K')


tests/codebase/main.py:65:4
    Any (CallExpr)
    v
V = [32mTypeVar('V')[0m


tests/codebase/main.py:65:-1
Any (TypeVarExpr)
v
V = TypeVar('V')[32m[0mV = TypeVar('V')


tests/codebase/main.py:65:0
Any (NameExpr)
v
[32mV[0m = TypeVar('V')


tests/codebase/main.py:73:20
                    builtins.dict[K`-1, V`-2] (DictExpr)
                    v
    c: dict[K, V] = [32m{}[0m,


tests/codebase/main.py:77:13
             Literal[1]? (IntExpr)
             v
    e: int = [32m1[0m,


tests/codebase/main.py:79:11
           None (NameExpr)
           v
    return [32mNone[0m


tests/codebase/new_type_syntax.py:1:16
                Overload(def (object: builtins.object =) -> builtins.str, def (object: _collections_abc.Buffer, encoding: builtins.str =, errors: builtins.str =) -> builtins.str) (NameExpr)
                v
type StrAlias = [32mstr[0m


tests/codebase/new_type_syntax.py:-1:-1
Overload(def (object: builtins.object =) -> builtins.str, def (object: _collections_abc.Buffer, encoding: builtins.str =, errors: builtins.str =) -> builtins.str) (NameExpr)
v
def foo[T: StrAlias](x: T) -> T:[32m[0mdef foo[T: StrAlias](x: T) -> T:


tests/codebase/new_type_syntax.py:5:11
           Any (NameExpr)
           v
    return [32mx[0m


tests/codebase/test.py:1:4
    Literal['Hello, world!']? (StrExpr)
    v
x = [32m'Hello, world!'[0m


tests/codebase/test.py:1:0
builtins.str (NameExpr)
v
[32mx[0m = 'Hello, world!'


tests/codebase/test.py:2:0
None (CallExpr)
v
[32mprint(x)[0m


tests/codebase/test.py:2:0
Overload(def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[_typeshed.SupportsWrite[builtins.str], None] =, flush: Literal[False] =), def (*values: builtins.object, sep: Union[builtins.str, None] =, end: Union[builtins.str, None] =, file: Union[builtins._SupportsWriteAndFlush[builtins.str], None] =, flush: builtins.bool)) (NameExpr)
v
[32mprint[0m(x)


tests/codebase/test.py:2:6
      builtins.str (NameExpr)
      v
print([32mx[0m)



stderr:

